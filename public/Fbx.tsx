/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 FlexionAnimacion.fbx.glb --transform --types 
Files: FlexionAnimacion.fbx.glb [48.21MB] > FlexionAnimacion.fbx-transformed.glb [1.14MB] (98%)
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    mesh_0: THREE.SkinnedMesh;
    mixamorig1Hips2: THREE.Bone;
  };
  materials: {};
};

type ActionName = "mixamo.com";
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<
    JSX.IntrinsicElements["skinnedMesh"] | JSX.IntrinsicElements["bone"]
  >
>;

export function Model(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials, animations } = useGLTF(
    "/FlexionAnimacion.fbx-transformed.glb"
  ) as GLTFResult;
  //@ts-ignore
  const { actions } = useAnimations<GLTFActions>(animations, group);
  useEffect(() => {
    actions["mixamo.com"].play();
    return () => animations.forEach((clip) => actions[clip.name]?.stop());
  }, [animations, actions]);
  useEffect(() => {
    const mixer = new THREE.AnimationMixer(nodes.mixamorig1Hips2);
    const action = mixer.clipAction(animations[0]);
    action.play();
    return () => animations.forEach((clip) => actions[clip.name]?.stop());
  }, [animations, actions, nodes.mixamorig1Hips2]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group>
        <primitive object={nodes.mixamorig1Hips2} />
        <skinnedMesh
          name="mesh_0"
          geometry={nodes.mesh_0.geometry}
          material={nodes.mesh_0.material}
          skeleton={nodes.mesh_0.skeleton}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/FlexionAnimacion.fbx-transformed.glb");
